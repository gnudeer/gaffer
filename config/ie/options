##########################################################################
#
#  Copyright (c) 2012-2015, Image Engine Design Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#      * Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#
#      * Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials provided with
#        the distribution.
#
#      * Neither the name of John Haddon nor the names of
#        any other contributors to this software may be used to endorse or
#        promote products derived from this software without specific prior
#        written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

import os
import sys
import distutils

import IEEnv

##########################################################################
# get arguments and other stuff to help us configure things
##########################################################################

def getOption( name, default ) :

	import sys
	result = default
	for a in sys.argv:
		if a[:len(name)+1]==name+"=" :
			result = a[len(name)+1:]

	return result


##########################################################################
# parse SConstruct file for the gafferVersion
##########################################################################

def gafferRegistryVersion() :

	import re
	sconsFile = "SConstruct"
	versionVars = ["gafferMilestoneVersion", "gafferMajorVersion"]
	varsToFind = list(versionVars)

	varsFound = {}
	with open( sconsFile, "r" ) as f :
		for line in f :
			for varName in varsToFind :
				match = re.match( "^\s*%s\s*=\s*(?P<value>\d+).*$" % varName, line )
				if match :
					varsFound[varName] = match.groupdict()["value"]
					varsToFind.remove( varName )
					break
			if not varsToFind:
				break

	if varsToFind:
		raise Exception( "Could not find the gaffer version in the SConstruct file. Please review the parsing rules." )

	return varsFound["gafferMilestoneVersion"] + "." + varsFound["gafferMajorVersion"] + ".0.0"


cortexVersion = getOption( "CORTEX_VERSION", os.environ["CORTEX_VERSION"] )
cortexCompatibilityVersion = ".".join( cortexVersion.split( "." )[0:2] )
cortexReg = IEEnv.registry["libraries"]["cortex"][cortexCompatibilityVersion][IEEnv.platform()]
compiler = getOption( "COMPILER", None )
compilerVersion = getOption( "COMPILER_VERSION", None )
targetApp = getOption( "APP", None )
targetAppVersion = None

gafferReg = IEEnv.registry["apps"]["gaffer"][gafferRegistryVersion()][IEEnv.platform()]
qtVersion = gafferReg["qtVersion"]
pysideVersion = gafferReg.get( "pysideVersion", "2.0.0" )
qtPyVersion = gafferReg.get( "qtPyVersion", "1.0.0.b3" )

## \todo: remove the last fallback for each of these once all shows are using Cortex 10.1+
oiioVersion = gafferReg.get( "OpenImageIOVersion", cortexReg.get( "OpenImageIOVersion", gafferReg.get( "OpenImageIO" ) ) )
ocioVersion = gafferReg.get( "OpenColorIOVersion", cortexReg.get( "OpenColorIOVersion", gafferReg.get( "OpenColorIO" ) ) )
oslVersion = gafferReg.get( "OpenShadingLanguageVersion", cortexReg.get( "OpenShadingLanguageVersion", gafferReg.get( "OpenShadingLanguage" ) ) )
vdbVersion = gafferReg.get( "OpenVDBVersion", cortexReg.get( "OpenVDBVersion", gafferReg.get( "OpenVDB" ) ) )

vTuneVersion = getOption( "VTUNE_VERSION", os.environ["VTUNE_VERSION"] )
VTUNE_ROOT = IEEnv.registry["apps"]["vtune"][vTuneVersion][IEEnv.platform()]["location"]

if targetApp :

	if targetApp not in ( "nuke", "maya", "houdini" ) :
		raise RuntimeError( "Check config logic applies to the new app and remove this exception." )

	if (compiler or compilerVersion) :
		raise RuntimeError( "Must specify only one of COMPILER or APP" )

	targetAppVersion = getOption( "APP_VERSION", os.environ.get( targetApp.upper() + "_VERSION" ) )

	targetAppReg = IEEnv.registry["apps"][targetApp][targetAppVersion][IEEnv.platform()]
	compiler = targetAppReg["compiler"]
	compilerVersion = targetAppReg["compilerVersion"]
	pythonVersion = targetAppReg["pythonVersion"]
	if targetApp in ( "nuke", ):
		targetAppMajorVersion = targetAppReg.get( "compatibilityVersion", targetAppReg.get( "majorVersion", targetAppVersion ) )
	else:
		targetAppMajorVersion = targetAppReg.get( "majorVersion", targetAppVersion )

	if "compilerFlags" in targetAppReg :
		CXXFLAGS = CXXFLAGS + targetAppReg["compilerFlags"]

	if "linkerFlags" in targetAppReg :
		targetAppLinkFlags = " ".join( targetAppReg["linkerFlags"] )
		if LINKFLAGS :
			LINKFLAGS = LINKFLAGS + " " + targetAppLinkFlags
		else :
			LINKFLAGS = targetAppLinkFlags

	qtVersion = targetAppReg.get( "qtVersion", qtVersion )
	
	if targetApp == "houdini" :
		if distutils.version.LooseVersion(targetAppVersion) >= distutils.version.LooseVersion("17.0") and distutils.version.LooseVersion(targetAppVersion) < distutils.version.LooseVersion("18.0"):
			VDB_LIB_SUFFIX = "_sesi"

else :

	targetApp = "gaffer"
	targetAppReg = gafferReg
	pythonVersion = cortexReg["preferredPythonVersion"]
	platformReg = IEEnv.registry["platformDefaults"][IEEnv.platform()]
	if not compiler :
		compiler = cortexReg.get( "compiler", platformReg["compiler"] )
	if not compilerVersion :
		compilerVersion = cortexReg.get( "compilerVersion", platformReg["compilerVersion"] )

CXXSTD = targetAppReg.get( "cxxStd", cortexReg.get( "cxxStd", "c++11" ) )

pythonReg = IEEnv.registry['apps']['python'][pythonVersion][IEEnv.platform()]

arnoldVersion = getOption( "ARNOLD_VERSION", os.environ.get( "ARNOLD_VERSION", "" ) )

try :
	arnoldReg = IEEnv.registry["apps"]["arnold"][arnoldVersion][IEEnv.platform()]
	ARNOLD_ROOT = arnoldReg["location"]
except :
	ARNOLD_ROOT = ""

dlVersion = getOption( "DL_VERSION", os.environ.get( "DL_VERSION", "" ) )

try :
	dlReg = IEEnv.registry["apps"]["3delight"][dlVersion][IEEnv.platform()]
	DELIGHT_ROOT = dlReg["location"]
except :
	DELIGHT_ROOT = ""

appleseedVersion = getOption( "APPLESEED_VERSION", os.environ.get( "APPLESEED_VERSION", "" ) )
try :
	appleseedReg = IEEnv.registry["apps"]["appleseed"][appleseedVersion][IEEnv.platform()]
	APPLESEED_ROOT = appleseedReg["location"] if compilerVersion != "4.1.2" else ""
	LOCATE_DEPENDENCY_APPLESEED_SEARCHPATH = os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "plugins", compiler, compilerVersion )
except :
	APPLESEED_ROOT = ""

OSLHOME = os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenShadingLanguage", oslVersion, IEEnv.platform(), compiler, compilerVersion )

sphinxRoot = os.path.join( IEEnv.Environment.rootPath(), "apps", "sphinx", "1.4.1" )

##########################################################################
# set where we'll put things
##########################################################################

versionString = "${GAFFER_MILESTONE_VERSION}.${GAFFER_MAJOR_VERSION}.${GAFFER_MINOR_VERSION}.${GAFFER_PATCH_VERSION}"
if getOption( "RELEASE", "0" )=="1" :
	buildRoot = "/tmp/gafferBuilds"
	installRoot = "/software"
else :
	buildRoot = os.path.expanduser( "~" )
	installRoot = os.path.expanduser( "/tmp/gafferTestInstalls" )
	versionString += "dev"

baseBuildDir = os.path.join( buildRoot, "apps", "gaffer", versionString, IEEnv.platform(), "cortex", cortexCompatibilityVersion )
baseInstallDir = os.path.join( installRoot, "apps", "gaffer", versionString, IEEnv.platform(), "cortex", cortexCompatibilityVersion )

BUILD_DIR = os.path.join( baseBuildDir, targetApp )
INSTALL_DIR = os.path.join( baseInstallDir, targetApp )

if targetAppVersion :

	BUILD_DIR = os.path.join( BUILD_DIR, targetAppMajorVersion )
	INSTALL_DIR = os.path.join( INSTALL_DIR, targetAppMajorVersion )

GAFFERCORTEX = True

##########################################################################
# get include locations right
##########################################################################

boostVersion = targetAppReg.get( "boostVersion", cortexReg["boostVersion"] )
tbbVersion = targetAppReg.get( "tbbVersion", cortexReg["tbbVersion"] ) 
exrVersion = targetAppReg.get( "OpenEXRVersion", cortexReg["OpenEXRVersion"] )
usdVersion = targetAppReg.get( "usdVersion", cortexReg["usdVersion"] )
vdbVersion = targetAppReg.get( "OpenVDBVersion", cortexReg["OpenVDBVersion"] )

LOCATE_DEPENDENCY_SYSTEMPATH = [

	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenColorIO", ocioVersion, IEEnv.platform(), compiler, compilerVersion, "include" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenImageIO", oiioVersion, IEEnv.platform(), compiler, compilerVersion, "include" ),
	os.path.join( OSLHOME, "include" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "qt", qtVersion, IEEnv.platform(), compiler, compilerVersion, "include" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "include", IEEnv.platform(), "glew", targetAppReg.get( "glew", cortexReg["glewVersion"] ) ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "include", IEEnv.platform(), "OpenEXR", exrVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "include", IEEnv.platform(), "OpenEXR", exrVersion, "OpenEXR" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "include", IEEnv.platform(), "tbb", tbbVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "include", IEEnv.platform(), "boost", boostVersion ),
	os.path.join( pythonReg["location"], compiler, compilerVersion, pythonReg["include"], "python" + pythonVersion ),
	"/usr/include/freetype2",
]

# append openVDB header when we are not building for Houdini.
# In Houdini, we are using Sidefx's openVDB header.
if not targetApp or targetApp != "houdini":
		LOCATE_DEPENDENCY_SYSTEMPATH += [ os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "include" ) ]
		LOCATE_DEPENDENCY_SYSTEMPATH += [ os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "python", "include", "python{0}".format( pythonVersion ) ) ]
# switching back to not used Houdini's namespaced library from Houdini 18 and up
elif targetApp == "houdini" and distutils.version.LooseVersion(targetAppVersion) >= distutils.version.LooseVersion("18.0"):
		LOCATE_DEPENDENCY_SYSTEMPATH[:0] = [ os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "include" ) ]
		LOCATE_DEPENDENCY_SYSTEMPATH[:0] = [ os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "python", "include", "python{0}".format( pythonVersion ) ) ]

if targetAppVersion :
	# for Houdini, we are favouring our dependency rather than sideFx's
	# given that 17.5 is shipping with openExr mangled lib without python binding.
	# We should reassess for next version of Houdini to see if that still holds true.
	if targetApp == "houdini" :
		LOCATE_DEPENDENCY_SYSTEMPATH += [ os.path.join( targetAppReg['location'], x ) for x in targetAppReg.get( 'includes', [] ) ]
	else :
		LOCATE_DEPENDENCY_SYSTEMPATH[:0] = [ os.path.join( targetAppReg['location'], x ) for x in targetAppReg.get( 'includes', [] ) ]

LOCATE_DEPENDENCY_CPPPATH = [
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "include" ),
]

if getOption( "RELEASE", "0" )=="0" :

	LOCATE_DEPENDENCY_CPPPATH.insert(
		0,
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "include" )
	)

	if targetAppVersion :
		LOCATE_DEPENDENCY_CPPPATH.insert(
			0,
			os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), targetApp, targetAppMajorVersion, "include" )
		)

##########################################################################
# get lib locations right
##########################################################################

LOCATE_DEPENDENCY_LIBPATH = [

	os.path.join( pythonReg["location"], compiler, compilerVersion, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "lib", compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "arnold", arnoldVersion, "lib", compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "lib", compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "tbb", tbbVersion, IEEnv.platform(), compiler, compilerVersion, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "qt", qtVersion, IEEnv.platform(), compiler, compilerVersion, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "PySide", pysideVersion, "qt" + qtVersion, "python" + pythonVersion, IEEnv.platform(), compiler, compilerVersion, "lib" ),
	os.path.join( OSLHOME, "lib64" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "usd", usdVersion, IEEnv.platform(), compiler, compilerVersion, "cortex", cortexCompatibilityVersion, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "python", "lib", "python{0}".format( pythonVersion ) ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "appleseed", appleseedVersion, IEEnv.platform(), "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "openexr", exrVersion, IEEnv.platform(), compiler, compilerVersion, "lib" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "openexr", exrVersion, IEEnv.platform(), compiler, compilerVersion, "python", pythonVersion, "boost", boostVersion, "lib64" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "lib", IEEnv.platform(), compiler, compilerVersion ),

]

LOCATE_DEPENDENCY_PYTHONPATH = [

	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "python", pythonVersion, compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "arnold", arnoldVersion, "python", pythonVersion, compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "python", pythonVersion, compiler, compilerVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "openexr", exrVersion, IEEnv.platform(), compiler, compilerVersion, "python", pythonVersion, "boost", boostVersion, "lib", "python" + pythonVersion, "site-packages" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenColorIO", ocioVersion, IEEnv.platform(), compiler, compilerVersion, "lib", "python" + pythonVersion, "site-packages" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "usd", usdVersion, IEEnv.platform(), compiler, compilerVersion, "cortex", cortexCompatibilityVersion, "lib", "python" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "OpenVDB", vdbVersion, IEEnv.platform(), compiler, compilerVersion, "python", "lib", "python" + pythonVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "PySide", pysideVersion, "qt" + qtVersion, "python" + pythonVersion, IEEnv.platform(), compiler, compilerVersion, "python" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "python", pythonVersion, IEEnv.platform(), compiler, compilerVersion, "sip", "4" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "python", pythonVersion, IEEnv.platform(), compiler, compilerVersion, "subprocess32", "3" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "python", pythonVersion, IEEnv.platform(), compiler, compilerVersion, "PyOpenGL", "3" ),
	os.path.join( IEEnv.Environment.rootPath(), "tools", "python", pythonVersion, "noarch" ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "Qt.py", qtPyVersion ),
	os.path.join( IEEnv.Environment.rootPath(), "apps", "six", os.environ["SIX_VERSION"] ),

]

LOCATE_DEPENDENCY_RESOURCESPATH = [

	os.path.join( IEEnv.Environment.rootPath(), "apps", "gafferResources", "0.46.1.0", "resources" ),

]

os.environ["IECOREGL_SHADER_INCLUDE_PATHS"] = os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "glsl" )

if targetAppVersion :

	targetAppLocation = targetAppReg["location"]
	if targetApp != "nuke" :
		# Include any library locations from the target application. We have to skip
		# this for Nuke at present (9.0v6) because Nuke contains a libpython2.7.so from Python 2.7.3,
		# and this is incompatible with the Python 2.7.5 we install for Python 2.7. Better
		# solutions might be to register Nuke's Python version as "2.7.3" in IEEnv rather than
		# as "2.7", or to update our build system to always use the python that ships with the
		# target app.
		for directory in targetAppReg.get( "libPaths", [] ) :
			LOCATE_DEPENDENCY_LIBPATH.insert(
				0,
				os.path.join( IEEnv.Environment.rootPath(), targetAppLocation, directory ),
			)

	LOCATE_DEPENDENCY_LIBPATH.insert(
		0,
		os.path.join( IEEnv.Environment.rootPath(), "apps", "cortex", cortexVersion, IEEnv.platform(), targetApp, targetAppMajorVersion, "lib" ),
	)

	LOCATE_DEPENDENCY_LIBPATH.insert(
		0,
		os.path.join( IEEnv.Environment.rootPath(), "tools", targetApp, targetAppVersion, "lib", IEEnv.platform() ),
	)

if getOption( "RELEASE", "0" )=="0" :

	LOCATE_DEPENDENCY_LIBPATH[:0] = [
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "lib", compiler, compilerVersion ),
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "arnold", arnoldVersion, "lib", compiler, compilerVersion ),
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "lib", compiler, compilerVersion ),
	]

	LOCATE_DEPENDENCY_PYTHONPATH[:0] = [
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "python", pythonVersion, compiler, compilerVersion ),
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "arnold", arnoldVersion, "python", pythonVersion, compiler, compilerVersion ),
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "python", pythonVersion, compiler, compilerVersion ),
	]

	LOCATE_DEPENDENCY_APPLESEED_SEARCHPATH = ":".join( [
		os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "appleseed", appleseedVersion, "plugins", compiler, compilerVersion ),
		LOCATE_DEPENDENCY_APPLESEED_SEARCHPATH
	] )

	os.environ["IECOREGL_SHADER_INCLUDE_PATHS"] = os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), "base", "glsl" ) + ":" + os.environ["IECOREGL_SHADER_INCLUDE_PATHS"]

	if targetAppVersion :
		LOCATE_DEPENDENCY_LIBPATH.insert(
			0,
			os.path.join( os.path.expanduser( "~" ), "apps", "cortex", cortexVersion, IEEnv.platform(), targetApp, targetAppMajorVersion, "lib" ),
		)

##########################################################################
# get compiler and other build tools set up
##########################################################################

compilerReg = IEEnv.registry["compilers"][compiler][compilerVersion][IEEnv.platform()]
CXX = os.path.join( compilerReg["location"], compilerReg["bin"] )

SPHINX = os.path.join( sphinxRoot, "bin", "sphinx-build" )

# for app installs we copy the docs and graphics from the standalone install
if targetAppVersion and "install" in sys.argv :
	SPHINX = "disableDocs"
	INKSCAPE = "disableGraphics"
	INSTALL_POST_COMMAND="scons -i -f config/ie/postInstall STANDALONE_INSTALL_DIR={baseInstallDir}/gaffer INSTALL_DIR=$INSTALL_DIR".format( baseInstallDir = baseInstallDir )

##########################################################################
# figure out the lib suffixes
##########################################################################

OPENEXR_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "OpenEXR", exrVersion )
OIIO_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "OpenImageIO", oiioVersion )
OCIO_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "OpenColorIO", ocioVersion )
OSL_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "OpenShadingLanguage", oslVersion )
BOOST_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "boost", boostVersion, { "compiler" : compiler, "compilerVersion" : compilerVersion } )
CORTEX_LIB_SUFFIX = IEEnv.BuildUtil.libSuffix( "cortex", cortexCompatibilityVersion )
CORTEX_PYTHON_LIB_SUFFIX = CORTEX_LIB_SUFFIX + "-python" + pythonVersion

os.environ["PATH"] = os.path.join( pythonReg["location"], compiler, compilerVersion, "bin" ) + ":" + os.environ["PATH"]
os.environ["PYTHONHOME"] = os.path.join( pythonReg["location"], compiler, compilerVersion )
sys.path.extend( [
	os.path.join( sphinxRoot, "lib", "python" + pythonVersion, "site-packages" ),
	os.path.join( sphinxRoot, "lib64", "python" + pythonVersion, "site-packages" ),
] )

os.environ["OCIO"] = os.path.join( IEEnv.Environment.rootPath(), "config", "openColorIO", "nuke-default", "config.ocio" )

# we need these imported so we can run subprocess commands
# variables specified in this list AND present in os.environ
# will be setup in the scons env.
ENV_VARS_TO_IMPORT = " ".join( [
	"PATH",
	"PYTHONPATH",
	"PYTHONHOME",
	"IEENV_ROOT",
	"IEENV_DISABLE_WRAPPER_ENV_CHECK",
	"IEENV_LIBRARY_PREFIX_PATH",
	"IEENV_WORKING_PATH",
	"IECORE_FONT_PATHS",
	"IECOREGL_SHADER_INCLUDE_PATHS",
	"COMPILER_VERSION",
	"SCONS_VERSION",
	"DOXYGEN_VERSION",
	"OSL_VERSION",
	"OCIO",
	"QT_QPA_PLATFORM_PLUGIN_PATH",
] )

# required if scons compiler version doesn't match the build compiler version
os.environ["COMPILER_VERSION"] = compilerVersion
# required for subprocesses that need to locate standard libs (eg oslc)
os.environ["IEENV_LIBRARY_PREFIX_PATH"] = "/software/tools/lib/$PLATFORM/$COMPILER/$COMPILER_VERSION"
# make sure the OSL we are building with is the one used by oslc
os.environ["OSL_VERSION"] = oslVersion
# the output is pretty tedious without this disabled
os.environ["IEENV_DISABLE_WRAPPER_ENV_CHECK"] = "1"
# required to run gaffer gui for the doc builds
os.environ["QT_QPA_PLATFORM_PLUGIN_PATH"] = os.path.join( IEEnv.Environment.rootPath(), "apps", "qt", qtVersion, IEEnv.platform(), compiler, compilerVersion, "plugins" )

# speed up the build a bit hopefully.
BUILD_CACHEDIR = os.environ["IEBUILD_CACHEDIR"]
